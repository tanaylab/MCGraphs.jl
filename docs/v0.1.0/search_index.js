var documenterSearchIndex = {"docs":
[{"location":"plotters.html#Plotters","page":"Plotters","title":"Plotters","text":"","category":"section"},{"location":"plotters.html","page":"Plotters","title":"Plotters","text":"MCGraphs.Plotters","category":"page"},{"location":"plotters.html#MCGraphs.Plotters","page":"Plotters","title":"MCGraphs.Plotters","text":"Generate complete graphs from a metacells Daf for standard graphs.\n\n\n\n\n\n","category":"module"},{"location":"plotters.html#Graphs","page":"Plotters","title":"Graphs","text":"","category":"section"},{"location":"plotters.html","page":"Plotters","title":"Plotters","text":"MCGraphs.Plotters.plot_gene_gene\nMCGraphs.Plotters.plot_sphere_sphere","category":"page"},{"location":"plotters.html#MCGraphs.Plotters.plot_gene_gene","page":"Plotters","title":"MCGraphs.Plotters.plot_gene_gene","text":"plot_gene_gene(\n    daf::DafReader;\n    x_gene::AbstractString,\n    y_gene::AbstractString,\n    axis::QueryString = \"metacell\",\n    color::Maybe{QueryString} = \"type\",\n    min_significant_gene_UMIs::Integer = 40,\n    gene_fraction_regularization::Maybe{AbstractFloat} = 1e-5,\n    colors::Maybe{QueryString} = \"/ type : color\",\n    entries_hovers::Maybe{QueryColumns} = [\"total_UMIs\" => \"=\", \"type\" => \"=\"],\n    genes_hovers::Maybe{QueryColumns} = nothing,\n)::Graph\n\nGenerate a complete gene-gene graph using extract_gene_gene_data, extract_categorical_color_palette, and default_gene_gene_configuration.\n\nBy default, we look at gene expression per metacell; you can override this using the axis parameter. Each point in the graph is a gene which has a robust comparable expression (at least min_significant_gene_UMIs between both axis entries).\n\n\n\n\n\n","category":"function"},{"location":"plotters.html#MCGraphs.Plotters.plot_sphere_sphere","page":"Plotters","title":"MCGraphs.Plotters.plot_sphere_sphere","text":"plot_sphere_sphere(\n    daf::DafReader;\n    x_sphere::AbstractString,\n    y_sphere::AbstractString,\n    min_significant_gene_UMIs::Integer = 40,\n    max_sphere_diameter::AbstractFloat = 2.0,\n    gene_fraction_regularization::AbstractFloat = 1e-5,\n    confidence::AbstractFloat = 0.9,\n)::Graph\n\nGenerate a complete sphere-sphere graph using extract_sphere_sphere_data and default_sphere_sphere_configuration.\n\nEach point in the graph is a gene which has a robust comparable expression (at least min_significant_gene_UMIs between both spgeres). A line is attached to each point showing the confidence modification used when deciding on grouping of metacells into spheres.\n\n\n\n\n\n","category":"function"},{"location":"plotters.html#Index","page":"Plotters","title":"Index","text":"","category":"section"},{"location":"plotters.html","page":"Plotters","title":"Plotters","text":"Pages = [\"plotters.md\"]","category":"page"},{"location":"renderers.html#Renderers","page":"Renderers","title":"Renderers","text":"","category":"section"},{"location":"renderers.html","page":"Renderers","title":"Renderers","text":"MCGraphs.Renderers\nMCGraphs.Renderers.Graph\nMCGraphs.Renderers.save_graph\nMCGraphs.Renderers.AbstractGraphData\nMCGraphs.Renderers.AbstractGraphConfiguration\nMCGraphs.Renderers.graph_to_figure\nMCGraphs.Renderers.PlotlyFigure","category":"page"},{"location":"renderers.html#MCGraphs.Renderers","page":"Renderers","title":"MCGraphs.Renderers","text":"Render interactive or static graphs.\n\nThis provides a selection of basic graph types needed for metacells visualization. For each one, we define a struct containing all the data for the graph, and a separate struct containing the configuration of the graph. The rendering function takes both and either returns a JavaScript blob needed to create the interactive graph, or writes the graph to a file.\n\nTODO:\n\nSizes legends.\nHeatmaps.\nHeatmap subplots as annotations for bar graph.\nHeatmap subplots as annotations for heatmaps.\n\n\n\n\n\n","category":"module"},{"location":"renderers.html#MCGraphs.Renderers.Graph","page":"Renderers","title":"MCGraphs.Renderers.Graph","text":"The type of a figure we can display. This is a combination of some AbstractGraphData and AbstractGraphConfiguration, which we can pass to graph_to_figure to obtain a PlotlyFigure which Julia knows how to display for us.\n\nYou can display the Graph inside interactive environments (Julia REPL and/or Jupyter notebooks), and/or use save_graph to write it to a file.\n\nThe valid combinations of concrete data and configuration which we can render are:\n\nAbstractGraphData AbstractGraphConfiguration Description\nPointsGraphData PointsGraphConfiguration Graph of points, possibly with edges between them.\nGridGraphData GridGraphConfiguration Graph of a grid of points (e.g. for correlations).\nLineGraphData LineGraphConfiguration Graph of a single line (e.g. a function y=f(x)).\nLinesGraphData LinesGraphConfiguration Graph of multiple functions, possibly stacked.\nCdfGraphData CdfGraphConfiguration Graph of a single cumulative distribution function.\nCdfsGraphData CdfsGraphConfiguration Graph of multiple cumulative distribution functions.\nDistributionGraphData DistributionGraphConfiguration Graph of a single distribution.\nDistributionsGraphData DistributionsGraphConfiguration Graph of multiple distributions.\nBarGraphData BarGraphConfiguration Graph of a single set of bars (histogram).\nBarsGraphData BarsGraphConfiguration Graph of multiple sets of bars (histograms).\n\n\n\n\n\n","category":"type"},{"location":"renderers.html#MCGraphs.Renderers.save_graph","page":"Renderers","title":"MCGraphs.Renderers.save_graph","text":"save_graph(graph::Graph, output_file::AbstractString)::Nothing\n\nSave the graph to a file. Unlike the Plotly savefig function, this function will actually obey the width and height parameters specified in the graph's configuration. The format is deduced from the suffix of the file name.\n\n\n\n\n\n","category":"function"},{"location":"renderers.html#MCGraphs.Renderers.AbstractGraphData","page":"Renderers","title":"MCGraphs.Renderers.AbstractGraphData","text":"Common abstract base for all complete graph data types. See Graph.\n\n\n\n\n\n","category":"type"},{"location":"renderers.html#MCGraphs.Renderers.AbstractGraphConfiguration","page":"Renderers","title":"MCGraphs.Renderers.AbstractGraphConfiguration","text":"Common abstract base for all complete graph configuration types. See Graph.\n\n\n\n\n\n","category":"type"},{"location":"renderers.html#MCGraphs.Renderers.graph_to_figure","page":"Renderers","title":"MCGraphs.Renderers.graph_to_figure","text":"graph_to_figure(graph::Graph)::PlotlyFigure\n\nRender a graph given its data and configuration. Technically this just converts the graph to a PlotlyFigure which Julia knows how display for us, rather than actually display the graph. The implementation depends on the specific graph type.\n\nnote: Note\nWhen saving a figure to a file, Plotly in its infinite wisdom ignores the graph width and height specified inside the figure, (except for saving HTML file). You should therefore use save_graph rather than call savefig on the result of graph_to_figure.\n\n\n\n\n\n","category":"function"},{"location":"renderers.html#MCGraphs.Renderers.PlotlyFigure","page":"Renderers","title":"MCGraphs.Renderers.PlotlyFigure","text":"The type of a rendered graph which Julia knows how to display. See graph_to_figure.\n\nA plotly figure contains everything needed to display an interactive graph (or generate a static one on disk). It can also be converted to a JSON string for handing it over to a different programming language (e.g., to be used to display the interactive graph in a Python Jupyter notebook, given an appropriate wrapper code).\n\n\n\n\n\n","category":"type"},{"location":"renderers.html#Points","page":"Renderers","title":"Points","text":"","category":"section"},{"location":"renderers.html","page":"Renderers","title":"Renderers","text":"MCGraphs.Renderers.PointsGraph\nMCGraphs.Renderers.PointsGraphData\nMCGraphs.Renderers.PointsGraphConfiguration\nMCGraphs.Renderers.PointsConfiguration","category":"page"},{"location":"renderers.html#MCGraphs.Renderers.PointsGraph","page":"Renderers","title":"MCGraphs.Renderers.PointsGraph","text":"A graph visualizing scattered points (possibly with edges between them). See PointsGraphData and PointsGraphConfiguration.\n\n\n\n\n\n","category":"type"},{"location":"renderers.html#MCGraphs.Renderers.PointsGraphData","page":"Renderers","title":"MCGraphs.Renderers.PointsGraphData","text":"@kwdef mutable struct PointsGraphData <: AbstractGraphData\n    graph_title::Maybe{AbstractString} = nothing\n    x_axis_title::Maybe{AbstractString} = nothing\n    y_axis_title::Maybe{AbstractString} = nothing\n    vertical_bands::BandsData = BandsData()\n    horizontal_bands::BandsData = BandsData()\n    diagonal_bands::BandsData = BandsData()\n    points_colors_title::Maybe{AbstractString} = nothing\n    points_sizes_title::Maybe{AbstractString} = nothing\n    borders_colors_title::Maybe{AbstractString} = nothing\n    borders_sizes_title::Maybe{AbstractString} = nothing\n    edges_group_title::Maybe{AbstractString} = nothing\n    edges_line_title::Maybe{AbstractString} = nothing\n    points_xs::AbstractVector{<:Real} = Float32[]\n    points_ys::AbstractVector{<:Real = Float32[]\n    points_colors::Maybe{Union{AbstractVector{<:AbstractString}, AbstractVector{<:Real}}} = nothing\n    sizes::Maybe{AbstractVector{<:Real}} = nothing\n    hovers::Maybe{AbstractVector{<:AbstractString}} = nothing\n    borders_colors::Maybe{Union{AbstractVector{<:AbstractString}, AbstractVector{<:Real}}} = nothing\n    borders_sizes::Maybe{AbstractVector{<:Real}} = nothing\n    edges_points::Maybe{AbstractVector{Tuple{<:Integer, <:Integer}}} = nothing\n    edges_colors::Maybe{AbstractVector{<:AbstractString}} = nothing\n    edges_sizes::Maybe{AbstractVector{<:Real}} = nothing\nend\n\nThe data for a scatter graph of points.\n\nBy default, all the titles are empty. You can specify the overall graph_title as well as the x_axis_title and y_axis_title for the axes.\n\nThe points_xs and points_ys vectors must be of the same size. If specified, the points_colors sizes and/or hovers vectors must also be of the same size. The points_colors can be either color names or a numeric value; if the latter, then the configuration's color_palette is used. Sizes are the diameter in pixels (1/96th of an inch). Hovers are only shown in interactive graphs (or when saving an HTML file).\n\nThe borders_colors and borders_sizes can be used to display additional data per point. The border size is in addition to the point size.\n\nThe points_colors_title, points_sizes_title, borders_colors_title and borders_sizes_title are only used if show_color_scale is set for the relevant color scales. You can't specify show_color_scale if there is no points_colors data or if the points_colors contain explicit color names.\n\nIt is possible to draw straight edges_points between specific point pairs. In this case the edges of the PointsGraphConfiguration will be used, and the edges_colors and edges_sizes will override it per edge. The edges_colors are restricted to explicit colors, not a color scale.\n\nA point (or a point border, or an edge) with a zero size and/or an empty string color (either from the data or from a categorical color_palette) will not be shown.\n\n\n\n\n\n","category":"type"},{"location":"renderers.html#MCGraphs.Renderers.PointsGraphConfiguration","page":"Renderers","title":"MCGraphs.Renderers.PointsGraphConfiguration","text":"@kwdef mutable struct PointsGraphConfiguration <: AbstractGraphConfiguration\n    graph::GraphConfiguration = GraphConfiguration()\n    x_axis::AxisConfiguration = AxisConfiguration()\n    y_axis::AxisConfiguration = AxisConfiguration()\n    points::PointsConfiguration = PointsConfiguration()\n    borders::PointsConfiguration = PointsConfiguration()\n    edges::PointsConfiguration = PointsConfiguration()\n    edges_over_points::Bool = true\n    vertical_bands::BandsConfiguration = BandsConfiguration()\n    horizontal_bands::BandsConfiguration = BandsConfiguration()\n    diagonal_bands::BandsConfiguration = BandsConfiguration()\nend\n\nConfigure a graph for showing a scatter graph of points.\n\nUsing the vertical_bands, horizontal_bands and/or diagonal_bands you can partition the graph into regions. The diagonal_bands can only be used if both axes are linear or both axes are in log scale; they also unify the ranges of the X and Y axes. If the axes are in log scale, the offset of the diagonal_bands are multiplicative instead of additive, and must be positive.\n\nIf edges_over_points is set, the edges will be plotted above the points; otherwise, the points will be plotted above the edges.\n\nThe borders is used if the PointsGraphData contains either the borders_colors and/or borders_sizes. This allows displaying some additional data per point.\n\nnote: Note\nThere is no show_legend for a GraphConfiguration of a points graph. Instead you probably want to set the show_color_scale of the points (and/or of the borders). In addition, the color scale options of the edges must not be set, as the edges_colors of PointsGraphData is restricted to explicit colors.\n\n\n\n\n\n","category":"type"},{"location":"renderers.html#MCGraphs.Renderers.PointsConfiguration","page":"Renderers","title":"MCGraphs.Renderers.PointsConfiguration","text":"@kwdef mutable struct PointsConfiguration\n    color::Maybe{AbstractString} = nothing\n    color_scale::AxisScale = AxisScale()\n    show_color_scale::Bool = false,\n    reverse_color_scale::Bool = false,\n    color_palette::Maybe{Union{\n        AbstractString,\n        AbstractVector{<:Tuple{<:Real, <:AbstractString}},\n        AbstractVector{<:Tuple{<:AbstractString, <:AbstractString}}\n    }} = nothing\n    size::Maybe{Real} = nothing\n    size_scale::AxisScale = AxisScale()\n    size_range::SizeRangeConfiguration = SizeRangeConfiguration()\nend\n\nConfigure points in a graph. By default, the point color and size is chosen automatically (when this is applied to edges, the size is the width of the line). You can override this by specifying colors and/or sizes in the PointsGraphData.\n\nFor color values, the color_palette is applied; this can be the name of a standard one, a vector of (value, color) tuples for a continuous (numeric value) scale or categorical (string value) scales. For sizes, the size_range is applied. The color_scale and reverse_color_scale can also be used to tweak the colors. If show_color_scale is set, then the colors will be shown (in the legend or as a color bar, as appropriate).\n\nIf size_scale and/or size_range are specified, they are used to control the conversion of the data sizes to pixel sizes.\n\n\n\n\n\n","category":"type"},{"location":"renderers.html#Grid","page":"Renderers","title":"Grid","text":"","category":"section"},{"location":"renderers.html","page":"Renderers","title":"Renderers","text":"MCGraphs.Renderers.GridGraph\nMCGraphs.Renderers.GridGraphData\nMCGraphs.Renderers.GridGraphConfiguration","category":"page"},{"location":"renderers.html#MCGraphs.Renderers.GridGraph","page":"Renderers","title":"MCGraphs.Renderers.GridGraph","text":"A graph visualizing points along a grid. See GridGraphData and GridGraphConfiguration.\n\nAn advantage of this over a heatmap is that you can control the color, size, and border color and size of the points to show more than one value per point. A disadvantage of this plot compared to a heatmap is that it only works for \"small\" amount of data. Also, you will need to manually tweak the graph size vs. the point sizes for best results, as Plotly's defaults aren't very good here.\n\n\n\n\n\n","category":"type"},{"location":"renderers.html#MCGraphs.Renderers.GridGraphData","page":"Renderers","title":"MCGraphs.Renderers.GridGraphData","text":"@kwdef mutable struct GridGraphData <: AbstractGraphData\n    graph_title::Maybe{AbstractString} = nothing\n    x_axis_title::Maybe{AbstractString} = nothing\n    y_axis_title::Maybe{AbstractString} = nothing\n    points_colors_title::Maybe{AbstractString} = nothing\n    borders_colors_title::Maybe{AbstractString} = nothing\n    columns_names::Maybe{AbstractVector{<:AbstractString}} = nothing\n    rows_names::Maybe{AbstractVector{<:AbstractString}} = nothing\n    points_colors::Maybe{Union{AbstractMatrix{<:Union{AbstractString, <:Real}}}} = nothing\n    points_sizes::Maybe{AbstractMatrix{<:Real}} = nothing\n    points_hovers::Maybe{AbstractMatrix{<:AbstractString}} = nothing\n    borders_colors::Maybe{Union{AbstractMatrix{<:Union{AbstractString, <:Real}}}} = nothing\n    borders_sizes::Maybe{AbstractMatrix{<:Real}} = nothing\nend\n\nThe data for a graph showing a grid of points (e.g. for correlations).\n\nThis is similar to a PointsGraphData, except that the data is given as a matrix instead of a vector, and no X and Y coordinates are given. Instead each matrix entry is plotted as a point at the matching grid location.\n\n\n\n\n\n","category":"type"},{"location":"renderers.html#MCGraphs.Renderers.GridGraphConfiguration","page":"Renderers","title":"MCGraphs.Renderers.GridGraphConfiguration","text":"@kwdef mutable struct GridGraphConfiguration <: AbstractGraphConfiguration\n    graph::GraphConfiguration = GraphConfiguration()\n    points::PointsConfiguration = PointsConfiguration()\n    borders::PointsConfiguration = PointsConfiguration()\nend\n\nConfigure a graph showing a grid of points (e.g. for correlations).\n\nThis displays a matrix of values using a point at each grid position. This is often used to show correlations between two sets of discrete variables. For large amounts of data, use a heatmap instead. An advantage of this over a heatmap is that you can control the color, size, and border color and size of the points to show more than one value per point. A disadvantage of this plot is that it only works for \"small\" amount of data. Also, you will need to manually tweak the graph size vs. the point sizes for best results, as Plotly's defaults aren't very good here.\n\n\n\n\n\n","category":"type"},{"location":"renderers.html#Lines","page":"Renderers","title":"Lines","text":"","category":"section"},{"location":"renderers.html","page":"Renderers","title":"Renderers","text":"MCGraphs.Renderers.LineGraph\nMCGraphs.Renderers.LinesGraph\nMCGraphs.Renderers.LineGraphData\nMCGraphs.Renderers.LinesGraphData\nMCGraphs.Renderers.LineGraphConfiguration\nMCGraphs.Renderers.LinesGraphConfiguration\nMCGraphs.Renderers.LineConfiguration","category":"page"},{"location":"renderers.html#MCGraphs.Renderers.LineGraph","page":"Renderers","title":"MCGraphs.Renderers.LineGraph","text":"A graph for visualizing a single line (typically Y as a function of X). See LineGraphData and LineGraphConfiguration.\n\n\n\n\n\n","category":"type"},{"location":"renderers.html#MCGraphs.Renderers.LinesGraph","page":"Renderers","title":"MCGraphs.Renderers.LinesGraph","text":"A graph visualizing multiple lines (typically Ys as functions of the same X). See LinesGraphData and LinesGraphConfiguration.\n\n\n\n\n\n","category":"type"},{"location":"renderers.html#MCGraphs.Renderers.LineGraphData","page":"Renderers","title":"MCGraphs.Renderers.LineGraphData","text":"@kwdef mutable struct LineGraphData <: AbstractGraphData\n    graph_title::Maybe{AbstractString} = nothing\n    x_axis_title::Maybe{AbstractString} = nothing\n    y_axis_title::Maybe{AbstractString} = nothing\n    vertical_bands::BandsData = BandsData()\n    horizontal_bands::BandsData = BandsData()\n    points_xs::AbstractVector{<:Real} = Float32[]\n    points_ys::AbstractVector{<:Real} = Float32[]\nend\n\nThe data for a line graph.\n\nBy default, all the titles are empty. You can specify the overall graph_title as well as the x_axis_title and y_axis_title for the axes.\n\nThe points_xs and points_ys vectors must be of the same size. A line will be drawn through all the points, and the area under the line may be filled.\n\n\n\n\n\n","category":"type"},{"location":"renderers.html#MCGraphs.Renderers.LinesGraphData","page":"Renderers","title":"MCGraphs.Renderers.LinesGraphData","text":"@kwdef mutable struct LinesGraphData <: AbstractGraphData\n    graph_title::Maybe{AbstractString} = nothing\n    x_axis_title::Maybe{AbstractString} = nothing\n    y_axis_title::Maybe{AbstractString} = nothing\n    legend_title::Maybe{AbstractString} = nothing\n    vertical_bands::BandsData = BandsData()\n    horizontal_bands::BandsData = BandsData()\n    lines_xs::AbstractVector{AbstractVector{<:Real}} = Vector{Float32}[]\n    lines_ys::AbstractVector{AbstractVector{<:Real}} = Vector{Float32}[]\n    lines_names::Maybe{AbstractVector{<:AbstractString}} = nothing\n    lines_colors::Maybe{AbstractVector{<:AbstractString}} = nothing\n    lines_widths::Maybe{AbstractVector{<:Real}} = nothing\n    lines_are_filled::Maybe{Union{AbstractVector{Bool}, BitVector}} = nothing\n    lines_are_dashed::Maybe{AbstractVector{Bool}} = nothing\nend\n\nThe data for multiple lines graph.\n\nBy default, all the titles are empty. You can specify the overall graph_title as well as the x_axis_title and y_axis_title for the axes.\n\nThe lines_xs and lines_ys vectors must be of the same size (one per line). For each line, its points xs and ys coordinate arrays must also be of the same size; a line will be drawn through all the points, and the area under the line may be filled. If stack_lines is specified in LinesGraphConfiguration, then the lines are specified in top-to-bottom order.\n\nThe lines_names, lines_colors, lines_widths, lines_are_filled and lines_are_dashed arrays must have the same number of entries (one per line). The lines_colors are restricted to explicit colors; therefore the color scale options of the line must not be used.\n\n\n\n\n\n","category":"type"},{"location":"renderers.html#MCGraphs.Renderers.LineGraphConfiguration","page":"Renderers","title":"MCGraphs.Renderers.LineGraphConfiguration","text":"@kwdef mutable struct LineGraphConfiguration <: AbstractGraphConfiguration\n    graph::GraphConfiguration = GraphConfiguration()\n    x_axis::AxisConfiguration = AxisConfiguration()\n    y_axis::AxisConfiguration = AxisConfiguration()\n    line::LineConfiguration = LineConfiguration()\n    vertical_bands::BandsConfiguration = BandsConfiguration()\n    horizontal_bands::BandsConfiguration = BandsConfiguration()\nend\n\nConfigure a graph for showing line plots.\n\n\n\n\n\n","category":"type"},{"location":"renderers.html#MCGraphs.Renderers.LinesGraphConfiguration","page":"Renderers","title":"MCGraphs.Renderers.LinesGraphConfiguration","text":"@kwdef mutable struct LinesGraphConfiguration <: AbstractGraphConfiguration\n    graph::GraphConfiguration = GraphConfiguration()\n    x_axis::AxisConfiguration = AxisConfiguration()\n    y_axis::AxisConfiguration = AxisConfiguration()\n    line::LineConfiguration = LineConfiguration()\n    vertical_bands::BandsConfiguration = BandsConfiguration()\n    horizontal_bands::BandsConfiguration = BandsConfiguration()\n    show_legend::Bool = false\n    data_stacking::Maybe{GraphDataStacking} = nothing\nend\n\nConfigure a graph for showing multiple line plots. This allows using show_legend to display a legend of the different lines, and data_stacking to stack instead of overlay the lines. If data_stacking is specified, then is_filled is implied, regardless of what its actual setting is.\n\n\n\n\n\n","category":"type"},{"location":"renderers.html#MCGraphs.Renderers.LineConfiguration","page":"Renderers","title":"MCGraphs.Renderers.LineConfiguration","text":"@kwdef mutable struct LineConfiguration\n    width::Maybe{Real} = 1\n    is_filled::Bool = false\n    is_dashed::Bool = false\n    color::Maybe{AbstractString} = nothing\nend\n\nConfigure a line in a graph.\n\nBy default, a solid line is shown; if is_dashed, the line will be dashed. If is_filled is set, the area below the line is filled. If the width is set to nothing, no line is shown (and is_filled must be set). By default, the color is chosen automatically.\n\n\n\n\n\n","category":"type"},{"location":"renderers.html#CDFs","page":"Renderers","title":"CDFs","text":"","category":"section"},{"location":"renderers.html","page":"Renderers","title":"Renderers","text":"MCGraphs.Renderers.CdfGraph\nMCGraphs.Renderers.CdfsGraph\nMCGraphs.Renderers.CdfGraphData\nMCGraphs.Renderers.CdfsGraphData\nMCGraphs.Renderers.CdfsGraphConfiguration\nMCGraphs.Renderers.CdfGraphConfiguration\nMCGraphs.Renderers.CdfDirection","category":"page"},{"location":"renderers.html#MCGraphs.Renderers.CdfGraph","page":"Renderers","title":"MCGraphs.Renderers.CdfGraph","text":"A graph visualizing a single cumulative distribution function. See CdfGraphData and CdfGraphConfiguration.\n\n\n\n\n\n","category":"type"},{"location":"renderers.html#MCGraphs.Renderers.CdfsGraph","page":"Renderers","title":"MCGraphs.Renderers.CdfsGraph","text":"A graph visualizing multiple cumulative distribution functions. See CdfsGraphData and CdfsGraphConfiguration.\n\n\n\n\n\n","category":"type"},{"location":"renderers.html#MCGraphs.Renderers.CdfGraphData","page":"Renderers","title":"MCGraphs.Renderers.CdfGraphData","text":"@kwdef mutable struct CdfGraphData <: AbstractGraphData\n    graph_title::Maybe{AbstractString} = nothing\n    value_axis_title::Maybe{AbstractString} = nothing\n    fraction_axis_title::Maybe{AbstractString} = nothing\n    cdf_values::AbstractVector{<:Real} = Float32[]\nend\n\nThe data for a CDF (Cumulative Distribution Function) graph.\n\nBy default, all the titles are empty. You can specify the overall graph_title as well as the value_axis_title and fraction_axis_title for the axes.\n\nThe order of the line_values does not matter.\n\n\n\n\n\n","category":"type"},{"location":"renderers.html#MCGraphs.Renderers.CdfsGraphData","page":"Renderers","title":"MCGraphs.Renderers.CdfsGraphData","text":"@kwdef mutable struct CdfsGraphData <: AbstractGraphData\n    graph_title::Maybe{AbstractString} = nothing\n    value_axis_title::Maybe{AbstractString} = nothing\n    fraction_axis_title::Maybe{AbstractString} = nothing\n    cdfs_values::AbstractVector{<:AbstractVector{<:Real}} = Vector{Float32}[]\n    cdfs_names::Maybe{AbstractVector{<:AbstractString}} = nothing\n    cdfs_colors::Maybe{AbstractVector{<:AbstractString}} = nothing\n    cdfs_widths::Maybe{AbstractVector{<:Real}} = nothing\n    cdfs_are_filled::Maybe{Union{AbstractVector{Bool}, BitVector}} = nothing\n    cdfs_are_dashed::Maybe{AbstractVector{Bool}} = nothing\nend\n\nThe data for multiple CDFs (Cumulative Distribution Functions) graph.\n\nBy default, all the titles are empty. You can specify the overall graph_title as well as the value_axis_title and fraction_axis_title for the axes.\n\nThe order of the entries inside each of the cdfs_values does not matter.\n\n\n\n\n\n","category":"type"},{"location":"renderers.html#MCGraphs.Renderers.CdfsGraphConfiguration","page":"Renderers","title":"MCGraphs.Renderers.CdfsGraphConfiguration","text":"@kwdef mutable struct CdfsGraphConfiguration <: AbstractGraphConfiguration\n    graph::GraphConfiguration = GraphConfiguration()\n    value_axis::AxisConfiguration = AxisConfiguration()\n    fraction_axis::AxisConfiguration = AxisConfiguration()\n    line::LineConfiguration = LineConfiguration()\n    values_orientation::ValuesOrientation = HorizontalValues\n    cdf_direction::CdfDirection = CdfUpToValue\n    value_bands::BandsConfiguration = BandsConfiguration()\n    fraction_bands::BandsConfiguration = BandsConfiguration()\n    show_legend::Bool = false\nend\n\nConfigure a graph for showing multiple CDF (Cumulative Distribution Function) graph. This is the same as CdfGraphConfiguration with the addition of a show_legend field.\n\nCDF graphs are internally converted to line graphs for rendering.\n\n\n\n\n\n","category":"type"},{"location":"renderers.html#MCGraphs.Renderers.CdfGraphConfiguration","page":"Renderers","title":"MCGraphs.Renderers.CdfGraphConfiguration","text":"@kwdef mutable struct CdfGraphConfiguration <: AbstractGraphConfiguration\n    graph::GraphConfiguration = GraphConfiguration()\n    value_axis::AxisConfiguration = AxisConfiguration()\n    fraction_axis::AxisConfiguration = AxisConfiguration()\n    line::LineConfiguration = LineConfiguration()\n    values_orientation::ValuesOrientation = HorizontalValues\n    cdf_direction::CdfDirection = CdfUpToValue\n    value_bands::BandsConfiguration = BandsConfiguration()\n    fraction_bands::BandsConfiguration = BandsConfiguration()\nend\n\nConfigure a graph for showing a CDF (Cumulative Distribution Function) graph. By default, the X axis is used for the values and the Y axis for the fraction; this can be switched using the values_orientation. By default, the fraction is of the values up to each value; this can be switched using the cdf_direction.\n\nBy default, the fraction axis units are between 0 and 1; if show_percent, this is changed to between 0 and 100.\n\nCDF graphs are internally converted to line graphs for rendering.\n\n\n\n\n\n","category":"type"},{"location":"renderers.html#MCGraphs.Renderers.CdfDirection","page":"Renderers","title":"MCGraphs.Renderers.CdfDirection","text":"The direction of the CDF graph:\n\nCdfUpToValue - Show the fraction of values up to each value.\n\nCdfDownToValue - Show the fraction of values down to each value.\n\n\n\n\n\n","category":"type"},{"location":"renderers.html#Bars","page":"Renderers","title":"Bars","text":"","category":"section"},{"location":"renderers.html","page":"Renderers","title":"Renderers","text":"MCGraphs.Renderers.BarGraph\nMCGraphs.Renderers.BarsGraph\nMCGraphs.Renderers.BarGraphData\nMCGraphs.Renderers.BarGraphConfiguration\nMCGraphs.Renderers.BarsGraphData\nMCGraphs.Renderers.BarsGraphConfiguration","category":"page"},{"location":"renderers.html#MCGraphs.Renderers.BarGraph","page":"Renderers","title":"MCGraphs.Renderers.BarGraph","text":"A graph visualizing a single series of bars. See BarGraphData and BarGraphConfiguration.\n\n\n\n\n\n","category":"type"},{"location":"renderers.html#MCGraphs.Renderers.BarsGraph","page":"Renderers","title":"MCGraphs.Renderers.BarsGraph","text":"A graph visualizing multiple series of bars. See BarsGraphData and BarsGraphConfiguration.\n\n\n\n\n\n","category":"type"},{"location":"renderers.html#MCGraphs.Renderers.BarGraphData","page":"Renderers","title":"MCGraphs.Renderers.BarGraphData","text":"@kwdef mutable struct BarGraphData <: AbstractGraphData\n    graph_title::Maybe{AbstractString} = nothing\n    value_axis_title::Maybe{AbstractString} = nothing\n    bar_axis_title::Maybe{AbstractString} = nothing\n    bars_values::AbstractVector{<:Real} = Float32[]\n    bars_names::Maybe{AbstractVector{<:AbstractString}} = nothing\n    bars_colors::Maybe{AbstractVector{<:AbstractString}} = nothing\n    bars_hovers::Maybe{AbstractVector{<:AbstractString}} = nothing\nend\n\nThe data for a single bar (histogram) graph.\n\nBy default, all the titles are empty. You can specify the overall graph_title as well as the value_axis_title and bar_axis_title for the axes.\n\nIf specified, the bars_names and/or bars_colors and/or bars_hovers vectors must contain the same number of elements as the number of bars_values.\n\n\n\n\n\n","category":"type"},{"location":"renderers.html#MCGraphs.Renderers.BarGraphConfiguration","page":"Renderers","title":"MCGraphs.Renderers.BarGraphConfiguration","text":"@kwdef mutable struct BarGraphConfiguration <: AbstractGraphConfiguration\n    graph::GraphConfiguration = GraphConfiguration()\n    value_axis::AxisConfiguration = AxisConfiguration()\n    values_orientation::ValuesOrientation = VerticalValues\n    bars_color::Maybe{AbstractString} = nothing\n    bars_gap::Maybe{Real} = nothing\nend\n\nConfigure a graph for showing a single bar (histogram) graph. The bars_color is chosen automatically. You can override it globally, or per-bar in the BarGraphData. By default, the X axis is used for the bars and the Y axis for the values; this can be switched using the values_orientation. The bars_gap is the fraction of white space between bars.\n\n\n\n\n\n","category":"type"},{"location":"renderers.html#MCGraphs.Renderers.BarsGraphData","page":"Renderers","title":"MCGraphs.Renderers.BarsGraphData","text":"@kwdef mutable struct BarsGraphData <: AbstractGraphData\n    graph_title::Maybe{AbstractString} = nothing\n    value_axis_title::Maybe{AbstractString} = nothing\n    bar_axis_title::Maybe{AbstractString} = nothing\n    legend_title::Maybe{AbstractString} = nothing\n    series_values::AbstractString{<:AbstractVector{<:Real}} = Vector{Float32}[]\n    series_names::Maybe{AbstractVector{<:AbstractString}} = nothing\n    series_colors::Maybe{AbstractVector{<:AbstractString}} = nothing\n    series_hovers::Maybe{AbstractVector{<:AbstractString}} = nothing\n    bars_hovers::Maybe{AbstractVector{<:AbstractString}} = nothing\n    bars_names::Maybe{AbstractVector{<:AbstractString}} = nothing\nend\n\nThe data for a multiple bars (histograms) graph.\n\nBy default, all the titles are empty. You can specify the overall graph_title as well as the value_axis_title, bar_axis_title for the axes, and the legend_title (if show_legend is set in BarsGraphConfiguration.\n\nAll the series_values vectors must be of the same size. If specified, the series_names and series_colors vectors must contain the same number of elements. If specified, the bars_names and/or bars_hovers vectors must contain the same number of elements in the each of the series_values vectors.\n\n\n\n\n\n","category":"type"},{"location":"renderers.html#MCGraphs.Renderers.BarsGraphConfiguration","page":"Renderers","title":"MCGraphs.Renderers.BarsGraphConfiguration","text":"@kwdef mutable struct BarsGraphConfiguration <: AbstractGraphConfiguration\n    graph::GraphConfiguration = GraphConfiguration()\n    value_axis::AxisConfiguration = AxisConfiguration()\n    values_orientation::ValuesOrientation = VerticalValues\n    bars_gap::Maybe{Real} = nothing\n    show_legend::Bool = false\n    data_stacking::Maybe{GraphDataStacking} = nothing\nend\n\nConfigure a graph for showing multiple bars (histograms) graph. This is similar to BarGraphConfiguration, without the color field (which makes no sense when multiple series are shown), and with the addition of a show_legend and data_stacking fields. If data_stacking isn't specified then the different series are just grouped.\n\n\n\n\n\n","category":"type"},{"location":"renderers.html#Distribution","page":"Renderers","title":"Distribution","text":"","category":"section"},{"location":"renderers.html","page":"Renderers","title":"Renderers","text":"MCGraphs.Renderers.DistributionGraph\nMCGraphs.Renderers.DistributionsGraph\nMCGraphs.Renderers.DistributionGraphData\nMCGraphs.Renderers.DistributionsGraphData\nMCGraphs.Renderers.DistributionGraphConfiguration\nMCGraphs.Renderers.DistributionsGraphConfiguration\nMCGraphs.Renderers.DistributionConfiguration","category":"page"},{"location":"renderers.html#MCGraphs.Renderers.DistributionGraph","page":"Renderers","title":"MCGraphs.Renderers.DistributionGraph","text":"A graph for visualizing a single distribution. See DistributionGraphData and DistributionGraphConfiguration.\n\n\n\n\n\n","category":"type"},{"location":"renderers.html#MCGraphs.Renderers.DistributionsGraph","page":"Renderers","title":"MCGraphs.Renderers.DistributionsGraph","text":"A graph for visualizing multiple distributions. See DistributionsGraphData and DistributionsGraphConfiguration.\n\n\n\n\n\n","category":"type"},{"location":"renderers.html#MCGraphs.Renderers.DistributionGraphData","page":"Renderers","title":"MCGraphs.Renderers.DistributionGraphData","text":"@kwdef mutable struct DistributionGraphData <: AbstractGraphData\n    graph_title::Maybe{AbstractString} = nothing\n    value_axis_title::Maybe{AbstractString} = nothing\n    trace_axis_title::Maybe{AbstractString} = nothing\n    distribution_values::AbstractVector{<:Real} = Float32[]\n    distribution_name::Maybe{AbstractString} = nothing\nend\n\nBy default, all the titles are empty. You can specify the overall graph_title as well as the value_axis_title and the trace_axis_title. The optional distribution_name is used as the tick value for the distribution.\n\n\n\n\n\n","category":"type"},{"location":"renderers.html#MCGraphs.Renderers.DistributionsGraphData","page":"Renderers","title":"MCGraphs.Renderers.DistributionsGraphData","text":"@kwdef mutable struct DistributionsGraphData <: AbstractGraphData\n    graph_title::Maybe{AbstractString} = nothing\n    value_axis_title::Maybe{AbstractString} = nothing\n    trace_axis_title::Maybe{AbstractString} = nothing\n    legend_title::Maybe{AbstractString} = nothing\n    distributions_values::AbstractVector{AbstractVector{<:Real}} = Vector{Float32}[]\n    distributions_names::Maybe{AbstractVector{<:AbstractString}} = nothing\n    distributions_colors::Maybe{AbstractVector{<:AbstractString}} = nothing\nend\n\nThe data for a multiple distributions graph. By default, all the titles are empty. You can specify the overall graph_title as well as the value_axis_title, the trace_axis_title and the legend_title (if show_legend is set). If specified, the distributions_names and/or the distributions_colors vectors must contain the same number of elements as the number of vectors in the distributions_values.\n\n\n\n\n\n","category":"type"},{"location":"renderers.html#MCGraphs.Renderers.DistributionGraphConfiguration","page":"Renderers","title":"MCGraphs.Renderers.DistributionGraphConfiguration","text":"@kwdef mutable struct DistributionGraphConfiguration <: AbstractGraphConfiguration\n    graph::GraphConfiguration = GraphConfiguration()\n    distribution::DistributionConfiguration = DistributionConfiguration()\n    value_axis::AxisConfiguration = AxisConfiguration()\nend\n\nConfigure a graph for showing a distribution (with DistributionGraphData) or several distributions (with DistributionsGraphData).\n\nThe optional color will be chosen automatically if not specified. When showing multiple distributions, it is also possible to specify the color of each one in the DistributionsGraphData.\n\n\n\n\n\n","category":"type"},{"location":"renderers.html#MCGraphs.Renderers.DistributionsGraphConfiguration","page":"Renderers","title":"MCGraphs.Renderers.DistributionsGraphConfiguration","text":"@kwdef mutable struct DistributionsGraphConfiguration <: AbstractGraphConfiguration\n    graph::GraphConfiguration = GraphConfiguration()\n    distribution::DistributionConfiguration = DistributionConfiguration()\n    value_axis::AxisConfiguration = AxisConfiguration()\n    show_legend::Bool = false\n    distributions_gap::Maybe{Real} = nothing\n    overlay_distributions::Bool = false\nend\n\nConfigure a graph for showing several distributions several distributions.\n\nThis is identical to DistributionGraphConfiguration with the addition of show_legend to show a legend. This is not set by default as it makes little sense unless overlay_distributions is also set. The distributions_gap is the fraction of white space between the distributions.\n\nnote: Note\nSpecifying a distributions_gap will end badly if using show_curve because Plotly.\n\n\n\n\n\n","category":"type"},{"location":"renderers.html#MCGraphs.Renderers.DistributionConfiguration","page":"Renderers","title":"MCGraphs.Renderers.DistributionConfiguration","text":"@kwdef mutable struct DistributionConfiguration\n    values_orientation::ValuesOrientation = VerticalValues\n    show_box::Bool = true\n    show_violin::Bool = false\n    show_curve::Bool = false\n    show_outliers::Bool = false\n    color::Maybe{AbstractString} = nothing\nend\n\nConfigure the style of a distribution graph.\n\nThe values_orientation controls which axis is used for the values (the other axis is used for the density). By default the values are shown on the Y axis (vertical values).\n\nIf show_box, show a box graph.\n\nIf show_violin, show a violin graph.\n\nIf show_curve, show a density curve.\n\nYou can combine the above; however, a density curve is just the positive side of a violin graph, so you can't combine the two.\n\nIn addition to the (combination) of the above, if show_outliers, also show the extreme (outlier) points.\n\nThe color is chosen automatically by default. When showing multiple distributions, you can override it per each one in the DistributionsGraphData.\n\n\n\n\n\n","category":"type"},{"location":"renderers.html#Common","page":"Renderers","title":"Common","text":"","category":"section"},{"location":"renderers.html","page":"Renderers","title":"Renderers","text":"MCGraphs.Renderers.GraphConfiguration\nMCGraphs.Renderers.AxisConfiguration\nMCGraphs.Renderers.ValuesOrientation\nMCGraphs.Renderers.GraphDataStacking\nMCGraphs.Renderers.SizeRangeConfiguration\nMCGraphs.Renderers.BandsConfiguration\nMCGraphs.Renderers.BandConfiguration\nMCGraphs.Renderers.BandsData","category":"page"},{"location":"renderers.html#MCGraphs.Renderers.GraphConfiguration","page":"Renderers","title":"MCGraphs.Renderers.GraphConfiguration","text":"@kwdef mutable struct GraphConfiguration\n    width::Maybe{Int} = nothing\n    height::Maybe{Int} = nothing\n    template::AbstractString = \"simple_white\"\n    show_grid::Bool = true\n    show_ticks::Bool = true\nend\n\nGeneric configuration that applies to any graph. Each complete AbstractGraphConfiguration contains a graph field of this type.\n\nThe optional width and height are in pixels, that is, 1/96 of an inch.\n\nBy default, show_grid and show_ticks are set.\n\nThe default template is \"simplewhite\" which is the cleanest. The `showgridandshow_ticks` can be used to disable the grid and/or ticks for an even cleaner (but less informative) look.\n\n\n\n\n\n","category":"type"},{"location":"renderers.html#MCGraphs.Renderers.AxisConfiguration","page":"Renderers","title":"MCGraphs.Renderers.AxisConfiguration","text":"@kwdef mutable struct AxisConfiguration\n    minimum::Maybe{Real} = nothing\n    maximum::Maybe{Real} = nothing\n    log_regularization::Maybe{AbstractFloat} = nothing,\nend\n\nGeneric configuration for a graph axis. Everything is optional; by default, the minimum and maximum are computed automatically from the data.\n\nIf log_regularization is set, it is added to the coordinate to avoid zero values, and the axis is shown in log (base\n\nscale. To help with finer-grained ratios, each 10x step is broken to three ~2.15 steps (which is \"close enough\" to\n\n2x for intuitive reading of the ratios).\n\n\n\n\n\n","category":"type"},{"location":"renderers.html#MCGraphs.Renderers.ValuesOrientation","page":"Renderers","title":"MCGraphs.Renderers.ValuesOrientation","text":"The orientation of the values axis in a distribution or bars graph:\n\nHorizontalValues - The values are the X axis\n\nVerticalValues - The values are the Y axis (the default).\n\n\n\n\n\n","category":"type"},{"location":"renderers.html#MCGraphs.Renderers.GraphDataStacking","page":"Renderers","title":"MCGraphs.Renderers.GraphDataStacking","text":"If stacking the data of multiple graphs, how:\n\nStackDataValues - simply add the values on top of each other.\n\nStackDataFractions - normalize the added values so their some is 1. The values must not be negative.\n\nStackDataPercents - normalize the added values so their some is 100 (percent). The values must not be negative.\n\n\n\n\n\n","category":"type"},{"location":"renderers.html#MCGraphs.Renderers.SizeRangeConfiguration","page":"Renderers","title":"MCGraphs.Renderers.SizeRangeConfiguration","text":"@kwdef mutable struct SizeRangeConfiguration\n    smallest::Maybe{Real} = nothing\n    largest::Maybe{Real} = nothing\nend\n\nConfigure the range of sizes in pixels (1/96th of an inch) to map the sizes data into. If no bounds are given, and also the scale is linear, then we assume the sizes data is just the size in pixels. Otherwise, by default we use 2 pixels for the smallest size and make the largest size be 8 pixels larger than the smallest size.\n\n\n\n\n\n","category":"type"},{"location":"renderers.html#MCGraphs.Renderers.BandsConfiguration","page":"Renderers","title":"MCGraphs.Renderers.BandsConfiguration","text":"@kwdef mutable struct BandsConfiguration\n    low::BandConfiguration = BandConfiguration(is_dashed = true)\n    middle::BandConfiguration = BandConfiguration()\n    high::BandConfiguration = BandConfiguration(is_dashed = true)\n    show_legend::Bool = false\nend\n\nConfigure the partition of the graph up to three band regions. The low and high bands are for the \"outer\" regions (so their lines are at their border, dashed by default) and the middle band is for the \"inner\" region between them (so its line is inside it, solid by default).\n\nIf show_legend, then a legend showing the bands will be shown.\n\n\n\n\n\n","category":"type"},{"location":"renderers.html#MCGraphs.Renderers.BandConfiguration","page":"Renderers","title":"MCGraphs.Renderers.BandConfiguration","text":"@kwdef mutable struct BandConfiguration\n    offset::Maybe{Real} = nothing\n    color::Maybe{AbstractString} = nothing\n    width::Maybe{Real} = 1.0\n    is_dashed::Bool = false\n    is_filled::Bool = false\nend\n\nConfigure a region of the graph defined by some band of values. This is the same as a LineConfiguration (for controlling the style of the line drawn for the band) with the addition of the offset of the line's position. We allow up to three bands in a complete BandsConfiguration. The low and high bands are defined as below and above their line's offset, and do not exist if the offset is not specified. The middle band is defined to be between these two lines (and therefore only exists if both are specified). Its offset defined a center line, if one is to be displayed, and is therefore optional.\n\n\n\n\n\n","category":"type"},{"location":"renderers.html#MCGraphs.Renderers.BandsData","page":"Renderers","title":"MCGraphs.Renderers.BandsData","text":"@kwdef mutable struct BandsData\n    legend_title::Maybe{AbstractString} = nothing\n    low_title::Maybe{AbstractString} = nothing\n    middle_title::Maybe{AbstractString} = nothing\n    high_title::Maybe{AbstractString} = nothing\nend\n\nLegend titles for a set of bands.\n\n\n\n\n\n","category":"type"},{"location":"renderers.html#Index","page":"Renderers","title":"Index","text":"","category":"section"},{"location":"renderers.html","page":"Renderers","title":"Renderers","text":"Pages = [\"renderers.md\"]","category":"page"},{"location":"validations.html#Validations","page":"Validations","title":"Validations","text":"","category":"section"},{"location":"validations.html","page":"Validations","title":"Validations","text":"MCGraphs.Validations\nMCGraphs.Validations.ObjectWithValidation\nMCGraphs.Validations.validate_object\nMCGraphs.Validations.assert_valid_object","category":"page"},{"location":"validations.html#MCGraphs.Validations","page":"Validations","title":"MCGraphs.Validations","text":"Validate user input.\n\nRendering graphs requires two objects: data and configuration. Both objects need to be internally consistent. This is especially relevant for the graph configuration. When creating UI for filling in these objects, we can in general easily validate each field on its own (e.g., ensure that a \"color\" field contains a valid color name). To ensure the overall object is consistent, we provide overall-type-specific validation functions that can be invoked by the UI to inform the user if the combination of (individually valid) field values is not valid for some reason.\n\n\n\n\n\n","category":"module"},{"location":"validations.html#MCGraphs.Validations.ObjectWithValidation","page":"Validations","title":"MCGraphs.Validations.ObjectWithValidation","text":"A common type for objects that support validation, that is, that one can invoke validate_object on.\n\n\n\n\n\n","category":"type"},{"location":"validations.html#MCGraphs.Validations.validate_object","page":"Validations","title":"MCGraphs.Validations.validate_object","text":"validate_object(object::ObjectWithValidation)::Maybe{AbstractString}\n\nValidate all field values of an object are compatible with each other, assuming each one is valid on its own. Returns nothing for a valid object and an error message if something is wrong. By default, this returns nothing.\n\nThis can be used by GUI widgets to validate the object as a whole (as opposed to validating each field based on its type).\n\n\n\n\n\n","category":"function"},{"location":"validations.html#MCGraphs.Validations.assert_valid_object","page":"Validations","title":"MCGraphs.Validations.assert_valid_object","text":"assert_valid_object(object_with_validation::ObjectWithValidation)::Maybe{AbstractString}\n\nThis will @assert that the object_with_validation is valid (that is, validate_object will return nothing for it). This is used in the back-end (graph rendering) code. It is recommended that the front-end (UI) code will invoke validate_object and ensure the user fixes problems before invoking the back-end code.\n\n\n\n\n\n","category":"function"},{"location":"validations.html#Index","page":"Validations","title":"Index","text":"","category":"section"},{"location":"validations.html","page":"Validations","title":"Validations","text":"Pages = [\"validations.md\"]","category":"page"},{"location":"extractors.html#Extractors","page":"Extractors","title":"Extractors","text":"","category":"section"},{"location":"extractors.html","page":"Extractors","title":"Extractors","text":"MCGraphs.Extractors","category":"page"},{"location":"extractors.html#MCGraphs.Extractors","page":"Extractors","title":"MCGraphs.Extractors","text":"Extract data from a metacells Daf for standard graphs.\n\n\n\n\n\n","category":"module"},{"location":"extractors.html#Data","page":"Extractors","title":"Data","text":"","category":"section"},{"location":"extractors.html","page":"Extractors","title":"Extractors","text":"MCGraphs.Extractors.extract_gene_gene_data\nMCGraphs.Extractors.extract_sphere_sphere_data","category":"page"},{"location":"extractors.html#MCGraphs.Extractors.extract_gene_gene_data","page":"Extractors","title":"MCGraphs.Extractors.extract_gene_gene_data","text":"extract_gene_gene_data(\n    daf::DafReader;\n    x_gene::AbstractString,\n    y_gene::AbstractString,\n    axis::QueryString,\n    min_significant_gene_UMIs::Integer = 40,\n    color::Maybe{QueryString} = nothing,\n    entries_hovers::Maybe{QueryColumns} = [\"total_UMIs\" => \"=\", \"type\" => \"=\"],\n    genes_hovers::Maybe{QueryColumns} = nothing,\n)::PointsGraphData\n\nExtract the data for a gene-gene graph from the daf data. The X coordinate of each point is the fraction of the x_gene and the Y coordinate of each gene is the fraction of the y_gene in each of the entries of the axis. By default we show the genes fractions of all metacells.\n\nWe ignore genes that don't have at least min_significant_gene_UMIs between both entries.\n\nIf a colors_query is specified, it can be a suffix of a query that fetches a value for each entry of the axis, or a full query that groups by the axis. By default we color by the type of the axis.\n\nAnything listed in hovers will be collected per metacell and used in the hover data.\n\n\n\n\n\n","category":"function"},{"location":"extractors.html#MCGraphs.Extractors.extract_sphere_sphere_data","page":"Extractors","title":"MCGraphs.Extractors.extract_sphere_sphere_data","text":"function extract_sphere_sphere_data(\n    daf::DafReader;\n    x_sphere::AbstractString,\n    y_sphere::AbstractString,\n    min_significant_gene_UMIs::Integer = 40,\n    gene_fraction_regularization::AbstractFloat = 1e-5,\n    confidence::AbstractFloat = 0.9,\n)::PointsGraphData\n\nExtract the data for a sphere-sphere graph. This shows why two spheres were not merged (or, if given the same sphere name twice, why the sphere was merged).\n\n\n\n\n\n","category":"function"},{"location":"extractors.html#Configuration","page":"Extractors","title":"Configuration","text":"","category":"section"},{"location":"extractors.html","page":"Extractors","title":"Extractors","text":"MCGraphs.Extractors.extract_categorical_color_palette\nMCGraphs.Extractors.default_gene_gene_configuration\nMCGraphs.Extractors.default_sphere_sphere_configuration","category":"page"},{"location":"extractors.html#MCGraphs.Extractors.extract_categorical_color_palette","page":"Extractors","title":"MCGraphs.Extractors.extract_categorical_color_palette","text":"extract_categorical_color_palette(\n    daf::DafReader,\n    query::QueryString\n)::AbstractVector{<:AbstractString, <:AbstractString}\n\nConvert the results of a query to a color palette for rendering. The query must return a named vector of strings; the names are taken to be the values and the strings are taken to be the color names. For example, extract_categorical_color_palette(daf, q\"/ type : color\") will return a color palette mapping each type to its color.\n\n\n\n\n\n","category":"function"},{"location":"extractors.html#MCGraphs.Extractors.default_gene_gene_configuration","page":"Extractors","title":"MCGraphs.Extractors.default_gene_gene_configuration","text":"default_gene_gene_configuration(\n    configuration = PointsGraphConfiguration();\n    gene_fraction_regularization::Maybe{AbstractFloat} = 1e-5,\n)::PointsGraphConfiguration\n\nReturn a default configuration for a gene-gene graph. This just applies the log scale to the axes. Will modify configuration in-place and return it.\n\n\n\n\n\n","category":"function"},{"location":"extractors.html#MCGraphs.Extractors.default_sphere_sphere_configuration","page":"Extractors","title":"MCGraphs.Extractors.default_sphere_sphere_configuration","text":"default_sphere_sphere_configuration(\n    configuration::PointsGraphConfiguration = PointsGraphConfiguration();\n    x_sphere::AbstractString,\n    y_sphere::AbstractString,\n    gene_fraction_regularization::AbstractFloat = 1e-5,\n)::PointsGraphConfiguration\n\nReturn a default configuration for a sphere-sphere graph. Will modify configuration in-place and return it.\n\n\n\n\n\n","category":"function"},{"location":"extractors.html#Index","page":"Extractors","title":"Index","text":"","category":"section"},{"location":"extractors.html","page":"Extractors","title":"Extractors","text":"Pages = [\"extractors.md\"]","category":"page"},{"location":"index.html#MCGraphs","page":"MCGraphs","title":"MCGraphs","text":"","category":"section"},{"location":"index.html","page":"MCGraphs","title":"MCGraphs","text":"MCGraphs.MCGraphs","category":"page"},{"location":"index.html#MCGraphs.MCGraphs","page":"MCGraphs","title":"MCGraphs.MCGraphs","text":"Generate graphs for visualizing scRNA-seq metacells data in a Daf data set. The symbols from the main sub-modules are re-exported from the main MCGraphs namespace. These sub-modules are:\n\nValidations - general API allowing controllers to validate use input.\nRenderers - functions that actually render graphs given their data and configuration.\nExtractors - functions that extract graph data from metacells Daf data sets.\nPlotters - functions that combine extraction and rendering, creating a graph in one call.\nControllers - TODO: UI elements for specifying graph data or configuration.\nWidgets - TODO: Combine multiple controllers for generating a complete graph.\nMenus - TODO: A tree of menus for selecting and generating a single graph or a dashboard of multiple graphs.\n\n\n\n\n\n","category":"module"},{"location":"index.html#Index","page":"MCGraphs","title":"Index","text":"","category":"section"},{"location":"index.html","page":"MCGraphs","title":"MCGraphs","text":"","category":"page"}]
}
