var documenterSearchIndex = {"docs":
[{"location":"renderers.html#Renderers","page":"Renderers","title":"Renderers","text":"","category":"section"},{"location":"renderers.html","page":"Renderers","title":"Renderers","text":"MCGraphs.Renderers\nMCGraphs.Renderers.render","category":"page"},{"location":"renderers.html#MCGraphs.Renderers","page":"Renderers","title":"MCGraphs.Renderers","text":"Render interactive or static graphs.\n\nThis provides a selection of basic graph types needed for metacells visualization. For each one, we define a struct containing all the data for the graph, and a separate struct containing the configuration of the graph. The rendering function takes both and either returns a JavaScript blob needed to create the interactive graph, or writes the graph to a file.\n\n\n\n\n\n","category":"module"},{"location":"renderers.html#MCGraphs.Renderers.render","page":"Renderers","title":"MCGraphs.Renderers.render","text":"render(\n    data::SomeGraphData,\n    configuration::SomeGraphConfiguration = SomeGraphConfiguration()\n)::Nothing\n\nRender a graph given its data and configuration. The implementation depends on the specific graph.\n\n\n\n\n\n","category":"function"},{"location":"renderers.html#Distribution","page":"Renderers","title":"Distribution","text":"","category":"section"},{"location":"renderers.html","page":"Renderers","title":"Renderers","text":"MCGraphs.Renderers.DistributionGraphData\nMCGraphs.Renderers.DistributionGraphConfiguration","category":"page"},{"location":"renderers.html#MCGraphs.Renderers.DistributionGraphData","page":"Renderers","title":"MCGraphs.Renderers.DistributionGraphData","text":"@kwdef struct DistributionGraphData\n    values::AbstractVector{<:AbstractFloat}\n    colors::Maybe{AbstractStringVector} = nothing\nend\n\nThe data for a distribution graph. The values vector is mandatory. The colors vector is optional and not normally specified. It only has an effect if the DistributionGraphConfiguration specifies showing the points.\n\n\n\n\n\n","category":"type"},{"location":"renderers.html#MCGraphs.Renderers.DistributionGraphConfiguration","page":"Renderers","title":"MCGraphs.Renderers.DistributionGraphConfiguration","text":"@kwdef struct DistributionGraphConfiguration <: ObjectWithValidation\n    output::AbstractString = nothing\n    title::AbstractString = nothing\n    values_title::AbstractString = nothing\n    horizontal::Bool = true\n    violin::Bool = true\n    box::Bool = false\n    points::Bool = false\nend\n\nConfigure a graph for showing a distribution.\n\noutput can be the path of a file (ending with .png or .svg). If it is nothing (the default), then render a JavaScript blob for an interactive graph.\n\nIf specified, title is used for the whole graph and values_title is used for the values axis.\n\nIf horizontal (the default), the value would be the X axis and the density would be the Y axis; otherwise, this will be reversed.\n\nIf violin, show a violin plot. If curve, show a density curve (which is just the positive side of the violin plot, so you can't specify both curve and violin). If box, show a box plot. If points, show the data points. Any other combination of these can be used as long as at least one of them is set. By defaults, shows just the curve plot.\n\nThe optional line_color, fill_color or point_color will be automatically chosen if not specified. The point_color is only used if showing the points. Also, if the graph data contains a color per point, then it overrides the configuration point_color.\n\n\n\n\n\n","category":"type"},{"location":"renderers.html#Index","page":"Renderers","title":"Index","text":"","category":"section"},{"location":"renderers.html","page":"Renderers","title":"Renderers","text":"Pages = [\"renderers.md\"]","category":"page"},{"location":"validations.html#Validations","page":"Validations","title":"Validations","text":"","category":"section"},{"location":"validations.html","page":"Validations","title":"Validations","text":"MCGraphs.Validations\nMCGraphs.Validations.ObjectWithValidation\nMCGraphs.Validations.validate_object\nMCGraphs.Validations.assert_valid_object","category":"page"},{"location":"validations.html#MCGraphs.Validations","page":"Validations","title":"MCGraphs.Validations","text":"Validate user input.\n\nRendering graphs requires two objects: data and configuration. Both objects need to be internally consistent. This is especially relevant for the graph configuration. When creating UI for filling in these objects, we can in general easily validate each field on its own (e.g., ensure that a \"color\" field contains a valid color name). To ensure the overall object is consistent, we provide overall-type-specific validation functions that can be invoked by the UI to inform the user if the combination of (individually valid) field values is not valid for some reason.\n\n\n\n\n\n","category":"module"},{"location":"validations.html#MCGraphs.Validations.ObjectWithValidation","page":"Validations","title":"MCGraphs.Validations.ObjectWithValidation","text":"A common type for objects that support validation, that is, that one can invoke validate_object on.\n\n\n\n\n\n","category":"type"},{"location":"validations.html#MCGraphs.Validations.validate_object","page":"Validations","title":"MCGraphs.Validations.validate_object","text":"validate_object(object::ObjectWithValidation)::Maybe{AbstractString}\n\nValidate all field values of an object are compatible with each other, assuming each one is valid on its own. Returns nothing for a valid object and an error message if something is wrong. By default, this returns nothing.\n\nThis can be used by GUI widgets to validate the object as a whole (as opposed to validating each field based on its type).\n\n\n\n\n\n","category":"function"},{"location":"validations.html#MCGraphs.Validations.assert_valid_object","page":"Validations","title":"MCGraphs.Validations.assert_valid_object","text":"assert_valid_object(object_with_validation::ObjectWithValidation)::Maybe{AbstractString}\n\nThis will @assert that the object_with_validation is valid (that is, validate_object will return nothing for it). This is used in the back-end (graph rendering) code. It is recommended that the front-end (UI) code will invoke validate_object and ensure the user fixes problems before invoking the back-end code.\n\n\n\n\n\n","category":"function"},{"location":"validations.html#Index","page":"Validations","title":"Index","text":"","category":"section"},{"location":"validations.html","page":"Validations","title":"Validations","text":"Pages = [\"validations.md\"]","category":"page"},{"location":"index.html#MCGraphs","page":"MCGraphs","title":"MCGraphs","text":"","category":"section"},{"location":"index.html","page":"MCGraphs","title":"MCGraphs","text":"MCGraphs.MCGraphs","category":"page"},{"location":"index.html#MCGraphs.MCGraphs","page":"MCGraphs","title":"MCGraphs.MCGraphs","text":"Generate graphs for visualizing scRNA-seq metacells data in a Daf data set. The symbols from the main sub-modules are re-exported from the main MCGraphs namespace. These sub-modules are:\n\nValidations - general API allowing controllers to validate use input.\nRenderers - TODO: functions that actually render graphs given their data and configuration.\nExtractors - TODO: functions that extract graph data from metacells Daf data sets.\nPlotters - TODO: functions that combine extraction and rendering, creating a graph in one call.\nControllers - TODO: UI elements for specifying graph data or configuration.\nWidgets - TODO: Combine multiple controllers for generating a complete graph.\nMenus - TODO: A tree of menus for selecting and generating a single graph or a dashboard of multiple graphs.\n\n\n\n\n\n","category":"module"},{"location":"index.html#Index","page":"MCGraphs","title":"Index","text":"","category":"section"},{"location":"index.html","page":"MCGraphs","title":"MCGraphs","text":"","category":"page"}]
}
